{
    "table_loading": {
        "parameters": {
            "max_cols": 8,
            "max_rows": 15,
            "min_alphanumeric": 2
        },
        "table_summary_prompt": "Generate a short one sentence table name for the provided table:\n{seed_table}",
        "initial_qg_prompt": "Come up with five interesting, complex, and verifiable questions that could be asked of this tabular information. The questions should require reasoning + aggregating information over the different rows / values. Critically, come up with a set of questions that covers each column at least once. Output ONLY the questions, answers and corresponding reference column names in json format. Rate and rank these in order of their objective answerability (on a scale of 1-10). Output format: {{'questions': [], 'source_columns': [], 'answers': [], 'objectiveness_scores': []}}. Sort them from most objective to least.\n{seed_table}."
    },
    "table_editing": {
        "edit_plan_icl_exs": [
            "data_generation_configs/generation_config/edit_plans/edit_plan_1.txt"
        ],
        "num_icl_dems_per_ex": 1,
        "edit_instruction_prompt": "I am providing a table (and it's name). I want to augment this table to introduce complex cross-row reasoning complexities, and additionally generate a corresponding difficult question to ask. Each table row will ultimately be convereted in a free-standing document, and the question will then be asked over the generated documents.\nBelow are demonstrations of table edits (and corresponding questions) that are formed from an provided table. Use these to generate 3 new edit plans + corresponding interesting questions for the table I provided you. The questions generated should be interesting yet objective/answerable. Rank the outputted edits/questions by their objectiveness. Your output json format: {{'edit_plans_list': list[{{edit_1: <edit>, edit_2: <edit>, edit_3: <edit>,...}}) 'new_questions_list': list(new_questions), 'new_answers_list': list(new_answers'), 'example_interestingness_rationale': list(<explain why this table edit sequence yields an interesting/challenging example>}}. Demonstration(s):\n{edit_demonstration}\nNow it's your turn. Apply this process to generate the edit plans+questions for this example:\nOriginal Table:\n{seed_table}\nTable Summary:{seed_table_summary}",
        "edit_application_prompt": "Edit Plan:\n{edit_plan}\n\nI am sequentially applying this series of edits to a table to make it more interesting and to yield more interesting reasoning. I want you to specifically apply edit_{edit_number} to the provided table. You can utilize the 'e.g.' suggestion in the edit if there is one, or feel free to apply something else that is better suited to making the example interesting. Update the question and answer to align with the edit, and explain your rationale for the answer. Output (as a json) the following: {{'edited_table': a '|'-delimited table, 'edit_description': the exact operation/edit(s) you carried out, 'table_question': <question that is being asked of this table>, 'table_answer': <answer>, 'answer_rationale': <rationale>}}.\nCurrent Table:\n{edited_table}",
        "edit_answerability_verification": "Prior Table -- Name: {seed_table_summary}\nPrior Table:\n{seed_table}\nTable Edits Applied:\n{actual_edits}\nResultant Table:\n{final_table}\nResultant Question:\n{final_question}\nResultant Answer\n{final_answer}\n\nInstruction: I have provided an original table, and then an updated version (using the edits) which resulted in an augmented table with a corresponding new question and answer. Use this context and think step by step to come up with a solution rationale that provides a justification for the answer. Note that the original table + edits are provided mostly for added reference. Output the rationale as a string."
    },
    "table_example_verification": {
        "ambiguity_prompt": "How many potential solutions are presented in this solutions summary. Score the question ambiguity (due to multiple solutions) on a scale of 1-5. Output a json with 'rationale' and 'score'. Original question:{question}\nCandidate Solution(s):{solutions}",
        "potential_answers_prompt": "Multiple valid solutions exist to this table-reasoning question. Identify all of them. \nInput table:\n{table}\nQuestion: {question}"
    },
    "doc_generation":{
        "contextual_outline": "I am creating a document set using the rows of this table:\nTable Description: {description}\nTable:\n{table}\nThe goal of the document set is to provide an challenging multi-doc input that can be used to answer this question: {question}. Note that this is the answer: {answer}\n Your task: create then execute a set of instructions that I can use to write/generate an interesting document for Row {doc_row}. Some table columns may provide additional generation guidelines to better contextualize the example. Your generation instructions can include extra tidbits, suggestions on writing style, and also directions to make some info less explicit (e.g. rather than saying 'Chicago' you might say 'The Windy City' -- but it must clearly map back). The instructions must: 1) contain suggested a concrete doc length (e.g. {doc_len} paragraphs) 2) include the info needed from this row for solving the question, 3) consider any context/generation guidelines within the table and 4) some stylistic suggestions + artificial context to make the document interesting and realistic. Again, do this for just Row {doc_row} (where row 1 is the first row after the header). Output a json with 'instructions' and 'resultant_document' fields. Make sure the resultant document contains the required info (either directly or indirectly) -- the info MUST be derivable from the document.",
        "contextual_outline_old": "I am creating a document set using the rows of this table:\nTable Description: {description}\nTable:\n{table}\nThe goal of the document set is to provide an challenging multi-doc input that can be used to answer this question: {question}. Note that this is the table-reasoning rationale+steps used for solving the question: {rationale}\n Your task: create then execute a set of instructions that I can use to write/generate an interesting document for Row {doc_row}. Some table columns may provide additional generation guidelines to better contextualize the example. Your generation instructions can include extra tidbits, suggestions on writing style, and also directions to make some info less explicit (e.g. rather than saying 'Chicago' you might say 'The Windy City' -- but it must clearly map back). The instructions must: 1) contain suggested a concrete doc length (e.g. {doc_len} paragraphs) 2) include the info needed from this row for solving the question, 3) consider any context/generation guidelines within the table and 4) some stylistic suggestions + artificial context to make the document interesting and realistic. Again, do this for just Row {doc_row} (ignoring the header). Output a json with 'instructions' and 'resultant_document' fields. Make sure the resultant document contains the required info (either directly or indirectly) -- the info MUST be derivable from the document.",
        "random_seed": 123,
        "shuffle_docs": false
    }

}